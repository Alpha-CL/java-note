package src.java.Base.DataType;


/** 原始类型 */
public class PrimitiveType {

    /**
     * 整数类型
     *
     * byte, short, int, long
     */

    // 1byte == 8bit
    // 0 0000000       256种组合
    //  - 使用第一个bit 表示 正负( 0: 正, 1: 负 )
    //  - 使用剩余部分表示整数部分

    // -2 ^ 7 - 1 ～ 2 ^ 7 - 1           // - 1 是因为数字 0
    // 可以存储 -128 到 127 之间的整数值
    byte myByte = 127;

    /** 以下逻辑 均和 byte 一样，依次 *2 即可  */

    // 可以存储 -32768 到 32767 之间的整数值
    short myShort = 32767;

    // 可以存储 -2147483648 到 2147483647 之间的整数值
    int myInt = 2147483647;

    // 可以存储 -9223372036854775808 到 9223372036854775807 之间的整数
    // 当数字长度超过 int 时，需要末尾加 L 标识: 数字是真的这么长
    long myLong = 9223372036854775807L;


    /**
     * 浮点类型
     *
     * float( 单精度 ), double( 双精度 )
     */

    // 4byte == 32bit
    // 0 000000000 0000000000000000000000
    //  - 使用第一个bit 表示
    //  - 使用 第二个到第是个之间的九个bit 表示整数部分
    //  - 使用剩余部分表示小数部分

    // 可以存储大约 6 到 7 个有效数字的小数值
    // 在初始化 float 类型的变量时，
    // 必须在数值后面加上字母 F 或 f，以告诉编译器这是一个 float 类型的数值
    float myFloat = 3.14159F;

    // 可以表示非常大或非常小的数，但是它也有精度限制
    // 进行精确计算时，应该使用 BigDecimal 类型来避免精度丢失的问题
    // 可选的数值后面加上字母 D 或 d
    double myDouble = 3.14159D;


    /**
     * 字符类型
     *
     * char
     */

    // 使用单引号将字符括起来
    // 范围是 0 到 65535
    // 可以表示 Unicode 字符集中的所有字符
    char myChar = 'A';
    char myCharYou = '\u4F60'; // 表示汉字 “你”


    /**
     * 布尔类型
     *
     * boolean
     */

    boolean myFalse = false;
    boolean myTrue = true;


    /**
     * 字符串( 引用类型 )
     *
     * 虽然 String 是引用类型，但它可以像基本数据类型一样进行直接赋值
     * 因为Java提供了字符串常量的简写形式，并自动将其放入字符串池中
     */

    String myString = "hello world";


    /**
     * 引用类型
     *
     * 1. 原始类型在 java 是预定义的，引用类型( 除 String 外)都是程序员自定义的
     * 2. 引用类型可以调用其类中定义的方法，原始类型则不行
     * 3. 原始类型始终有一个值，引用类型可以为 null
     * 4. 原始值是 小写字符开头，引用类型是 大些字符开头
     */
}
